{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vinay\\\\Desktop\\\\AG-Grid\\\\my-app\\\\src\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GridExample = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  };\n\n  const getRowData = () => {\n    const rowData = [];\n    gridApi.forEachNode(function (node) {\n      rowData.push(node.data);\n    });\n    console.log('Row Data:');\n    console.log(rowData);\n  };\n\n  const clearData = () => {\n    gridApi.setRowData([]);\n  };\n\n  const addItems = addIndex => {\n    const newItems = [createNewRowData(), createNewRowData(), createNewRowData()];\n    const res = gridApi.applyTransaction({\n      add: newItems,\n      addIndex: addIndex\n    });\n    printResult(res);\n  };\n\n  const updateItems = () => {\n    const itemsToUpdate = [];\n    gridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n      if (index >= 2) {\n        return;\n      }\n\n      const data = rowNode.data;\n      data.price = Math.floor(Math.random() * 20000 + 20000);\n      itemsToUpdate.push(data);\n    });\n    const res = gridApi.applyTransaction({\n      update: itemsToUpdate\n    });\n    printResult(res);\n  };\n\n  const onRemoveSelected = () => {\n    const selectedData = gridApi.getSelectedRows();\n    const res = gridApi.applyTransaction({\n      remove: selectedData\n    });\n    printResult(res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '4px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addItems(),\n          children: \"Add Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addItems(2),\n          children: \"Add Items addIndex=2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateItems(),\n          children: \"Update Top 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onRemoveSelected(),\n          children: \"Remove Selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => getRowData(),\n          children: \"Get Row Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => clearData(),\n          children: \"Clear Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: '1'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"myGrid\",\n          style: {\n            height: '100%',\n            width: '100%'\n          },\n          className: \"ag-theme-alpine\",\n          children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n            rowData: [{\n              make: 'Toyota',\n              model: 'Celica',\n              price: 35000,\n              zombies: 'Elly',\n              style: 'Smooth',\n              clothes: 'Jeans'\n            }, {\n              make: 'Ford',\n              model: 'Mondeo',\n              price: 32000,\n              zombies: 'Shane',\n              style: 'Filthy',\n              clothes: 'Shorts'\n            }, {\n              make: 'Porsche',\n              model: 'Boxter',\n              price: 72000,\n              zombies: 'Jack',\n              style: 'Dirty',\n              clothes: 'Padded'\n            }],\n            defaultColDef: {\n              flex: 1\n            },\n            rowSelection: 'multiple',\n            animateRows: true,\n            onGridReady: onGridReady,\n            children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n              field: \"make\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n              field: \"model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n              field: \"price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n              field: \"zombies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n              field: \"style\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n              field: \"clothes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GridExample, \"m7jW4tvR+j2TZAbZBOJL+Tq0WBw=\");\n\n_c = GridExample;\nlet newCount = 1;\n\nfunction createNewRowData() {\n  const newData = {\n    make: 'Toyota ' + newCount,\n    model: 'Celica ' + newCount,\n    price: 35000 + newCount * 17,\n    zombies: 'Headless',\n    style: 'Little',\n    clothes: 'Airbag'\n  };\n  newCount++;\n  return newData;\n}\n\nfunction printResult(res) {\n  console.log('---------------------------------------');\n\n  if (res.add) {\n    res.add.forEach(function (rowNode) {\n      console.log('Added Row Node', rowNode);\n    });\n  }\n\n  if (res.remove) {\n    res.remove.forEach(function (rowNode) {\n      console.log('Removed Row Node', rowNode);\n    });\n  }\n\n  if (res.update) {\n    res.update.forEach(function (rowNode) {\n      console.log('Updated Row Node', rowNode);\n    });\n  }\n}\n\nrender( /*#__PURE__*/_jsxDEV(GridExample, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 160,\n  columnNumber: 8\n}, this), document.querySelector('#root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"GridExample\");","map":{"version":3,"sources":["C:/Users/vinay/Desktop/AG-Grid/my-app/src/Table.js"],"names":["React","useState","render","AgGridReact","AgGridColumn","GridExample","gridApi","setGridApi","gridColumnApi","setGridColumnApi","onGridReady","params","api","columnApi","getRowData","rowData","forEachNode","node","push","data","console","log","clearData","setRowData","addItems","addIndex","newItems","createNewRowData","res","applyTransaction","add","printResult","updateItems","itemsToUpdate","forEachNodeAfterFilterAndSort","rowNode","index","price","Math","floor","random","update","onRemoveSelected","selectedData","getSelectedRows","remove","width","height","display","flexDirection","marginBottom","flexGrow","make","model","zombies","style","clothes","flex","newCount","newData","forEach","document","querySelector"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nconst GridExample = () => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n  };\r\n\r\n  const getRowData = () => {\r\n    const rowData = [];\r\n    gridApi.forEachNode(function (node) {\r\n      rowData.push(node.data);\r\n    });\r\n    console.log('Row Data:');\r\n    console.log(rowData);\r\n  };\r\n\r\n  const clearData = () => {\r\n    gridApi.setRowData([]);\r\n  };\r\n\r\n  const addItems = (addIndex) => {\r\n    const newItems = [\r\n      createNewRowData(),\r\n      createNewRowData(),\r\n      createNewRowData(),\r\n    ];\r\n    const res = gridApi.applyTransaction({\r\n      add: newItems,\r\n      addIndex: addIndex,\r\n    });\r\n    printResult(res);\r\n  };\r\n\r\n  const updateItems = () => {\r\n    const itemsToUpdate = [];\r\n    gridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {\r\n      if (index >= 2) {\r\n        return;\r\n      }\r\n      const data = rowNode.data;\r\n      data.price = Math.floor(Math.random() * 20000 + 20000);\r\n      itemsToUpdate.push(data);\r\n    });\r\n    const res = gridApi.applyTransaction({ update: itemsToUpdate });\r\n    printResult(res);\r\n  };\r\n\r\n  const onRemoveSelected = () => {\r\n    const selectedData = gridApi.getSelectedRows();\r\n    const res = gridApi.applyTransaction({ remove: selectedData });\r\n    printResult(res);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%' }}>\r\n      <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n        <div style={{ marginBottom: '4px' }}>\r\n          <button onClick={() => addItems()}>Add Items</button>\r\n          <button onClick={() => addItems(2)}>Add Items addIndex=2</button>\r\n          <button onClick={() => updateItems()}>Update Top 2</button>\r\n          <button onClick={() => onRemoveSelected()}>Remove Selected</button>\r\n          <button onClick={() => getRowData()}>Get Row Data</button>\r\n          <button onClick={() => clearData()}>Clear Data</button>\r\n        </div>\r\n        <div style={{ flexGrow: '1' }}>\r\n          <div\r\n            id=\"myGrid\"\r\n            style={{\r\n              height: '100%',\r\n              width: '100%',\r\n            }}\r\n            className=\"ag-theme-alpine\"\r\n          >\r\n            <AgGridReact\r\n              rowData={[\r\n                {\r\n                  make: 'Toyota',\r\n                  model: 'Celica',\r\n                  price: 35000,\r\n                  zombies: 'Elly',\r\n                  style: 'Smooth',\r\n                  clothes: 'Jeans',\r\n                },\r\n                {\r\n                  make: 'Ford',\r\n                  model: 'Mondeo',\r\n                  price: 32000,\r\n                  zombies: 'Shane',\r\n                  style: 'Filthy',\r\n                  clothes: 'Shorts',\r\n                },\r\n                {\r\n                  make: 'Porsche',\r\n                  model: 'Boxter',\r\n                  price: 72000,\r\n                  zombies: 'Jack',\r\n                  style: 'Dirty',\r\n                  clothes: 'Padded',\r\n                },\r\n              ]}\r\n              defaultColDef={{ flex: 1 }}\r\n              rowSelection={'multiple'}\r\n              animateRows={true}\r\n              onGridReady={onGridReady}\r\n            >\r\n              <AgGridColumn field=\"make\" />\r\n              <AgGridColumn field=\"model\" />\r\n              <AgGridColumn field=\"price\" />\r\n              <AgGridColumn field=\"zombies\" />\r\n              <AgGridColumn field=\"style\" />\r\n              <AgGridColumn field=\"clothes\" />\r\n            </AgGridReact>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet newCount = 1;\r\nfunction createNewRowData() {\r\n  const newData = {\r\n    make: 'Toyota ' + newCount,\r\n    model: 'Celica ' + newCount,\r\n    price: 35000 + newCount * 17,\r\n    zombies: 'Headless',\r\n    style: 'Little',\r\n    clothes: 'Airbag',\r\n  };\r\n  newCount++;\r\n  return newData;\r\n}\r\nfunction printResult(res) {\r\n  console.log('---------------------------------------');\r\n  if (res.add) {\r\n    res.add.forEach(function (rowNode) {\r\n      console.log('Added Row Node', rowNode);\r\n    });\r\n  }\r\n  if (res.remove) {\r\n    res.remove.forEach(function (rowNode) {\r\n      console.log('Removed Row Node', rowNode);\r\n    });\r\n  }\r\n  if (res.update) {\r\n    res.update.forEach(function (rowNode) {\r\n      console.log('Updated Row Node', rowNode);\r\n    });\r\n  }\r\n}\r\n\r\nrender(<GridExample></GridExample>, document.querySelector('#root'));"]},"metadata":{},"sourceType":"module"}