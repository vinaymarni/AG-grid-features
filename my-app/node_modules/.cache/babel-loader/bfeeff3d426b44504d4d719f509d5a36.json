{"ast":null,"code":"// ag-grid-react v26.2.0\n\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PortalManager =\n/** @class */\nfunction () {\n  function PortalManager(parent, wrappingElement, maxComponentCreationTimeMs) {\n    this.destroyed = false;\n    this.portals = [];\n    this.hasPendingPortalUpdate = false;\n    this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n    this.parent = parent;\n    this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n  }\n\n  PortalManager.prototype.getPortals = function () {\n    return this.portals;\n  };\n\n  PortalManager.prototype.destroy = function () {\n    this.destroyed = true;\n  };\n\n  PortalManager.prototype.destroyPortal = function (portal) {\n    this.portals = this.portals.filter(function (curPortal) {\n      return curPortal !== portal;\n    });\n    this.batchUpdate();\n  };\n\n  PortalManager.prototype.getComponentWrappingElement = function () {\n    return this.wrappingElement;\n  };\n\n  PortalManager.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n    this.portals = __spreadArrays(this.portals, [portal]);\n    this.waitForInstance(reactComponent, resolve);\n    this.batchUpdate();\n  };\n\n  PortalManager.prototype.updateReactPortal = function (oldPortal, newPortal) {\n    this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n    this.batchUpdate();\n  };\n\n  PortalManager.prototype.batchUpdate = function () {\n    var _this = this;\n\n    if (this.hasPendingPortalUpdate) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (!_this.destroyed) {\n        // destroyed?\n        _this.parent.forceUpdate(function () {\n          _this.hasPendingPortalUpdate = false;\n        });\n      }\n    });\n    this.hasPendingPortalUpdate = true;\n  };\n\n  PortalManager.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n    var _this = this;\n\n    if (startTime === void 0) {\n      startTime = Date.now();\n    } // if the grid has been destroyed in the meantime just resolve\n\n\n    if (this.destroyed) {\n      resolve(null);\n      return;\n    }\n\n    if (reactComponent.rendered()) {\n      resolve(reactComponent);\n    } else {\n      if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n        // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n        // can mess up contexts\n        if (reactComponent.isNullValue()) {\n          resolve(reactComponent);\n          return;\n        }\n\n        console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + this.maxComponentCreationTimeMs + \"ms\");\n        return;\n      }\n\n      window.setTimeout(function () {\n        _this.waitForInstance(reactComponent, resolve, startTime);\n      });\n    }\n  };\n\n  PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n\n  return PortalManager;\n}();\n\nexports.PortalManager = PortalManager;","map":{"version":3,"sources":["C:/Users/vinay/Desktop/AG-Grid/my-app/node_modules/ag-grid-react/lib/shared/portalManager.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","PortalManager","parent","wrappingElement","maxComponentCreationTimeMs","destroyed","portals","hasPendingPortalUpdate","MAX_COMPONENT_CREATION_TIME_IN_MS","prototype","getPortals","destroy","destroyPortal","portal","filter","curPortal","batchUpdate","getComponentWrappingElement","mountReactPortal","reactComponent","resolve","waitForInstance","updateReactPortal","oldPortal","newPortal","indexOf","_this","setTimeout","forceUpdate","startTime","Date","now","rendered","isNullValue","console","error","getReactComponentName","window"],"mappings":"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","sourcesContent":["// ag-grid-react v26.2.0\n\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PortalManager = /** @class */ (function () {\n    function PortalManager(parent, wrappingElement, maxComponentCreationTimeMs) {\n        this.destroyed = false;\n        this.portals = [];\n        this.hasPendingPortalUpdate = false;\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.parent = parent;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n    PortalManager.prototype.getPortals = function () {\n        return this.portals;\n    };\n    PortalManager.prototype.destroy = function () {\n        this.destroyed = true;\n    };\n    PortalManager.prototype.destroyPortal = function (portal) {\n        this.portals = this.portals.filter(function (curPortal) { return curPortal !== portal; });\n        this.batchUpdate();\n    };\n    PortalManager.prototype.getComponentWrappingElement = function () {\n        return this.wrappingElement;\n    };\n    PortalManager.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n        this.portals = __spreadArrays(this.portals, [portal]);\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    };\n    PortalManager.prototype.updateReactPortal = function (oldPortal, newPortal) {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    };\n    PortalManager.prototype.batchUpdate = function () {\n        var _this = this;\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n        setTimeout(function () {\n            if (!_this.destroyed) { // destroyed?\n                _this.parent.forceUpdate(function () {\n                    _this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n        this.hasPendingPortalUpdate = true;\n    };\n    PortalManager.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n        var _this = this;\n        if (startTime === void 0) { startTime = Date.now(); }\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        }\n        else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n                console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + this.maxComponentCreationTimeMs + \"ms\");\n                return;\n            }\n            window.setTimeout(function () {\n                _this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    };\n    PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n    return PortalManager;\n}());\nexports.PortalManager = PortalManager;\n"]},"metadata":{},"sourceType":"script"}